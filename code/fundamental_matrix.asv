function [ F res_err ] = fundamental_matrix( X )
% Compute the fundamental matrix
%   Detailed explanation goes here

% number of point correspondences
N = size(X,1);

% get normalization matrices
x1 = [X(:,[1 2]) ones(N,1)];
x2 = [X(:,[3 4]) ones(N,1)];
T1 = normalize(x1);
T2 = normalize(x2);

% perform normalization
x1 = x1*T1';
x2 = x2*T2';
A = [x1(:,1).*x2(:,1) x1(:,2).*x2(:,1) x2(:,1) x1(:,1).*x2(:,2)...
    x1(:,2).*x2(:,2) x2(:,2) x1(:,1) x1(:,2) ones(N,1)];
x1 = x1';
x2 = x2';

% find singular vector
[U_a,S_a,V_a] = svd(A);
m = size(V_a);

% find the singular vector with smallest singular value
f = V_a(:,m(2));
f = reshape(f,3,3)';

% enforcing the internal constraint
[U,S,V] = svd(f);

% set rank 2
n = size(V);
S(n(1),n(2)) = 0;
F = U*S*V';

% denormalization
F = T2'*F*T1;

%Residual Error
epipolar1=F*x1_h;
epipolar2=F'*x2_h;

Z = [];
for i=1:length(X)
    Z(i) = 0.5*(([epipolar1(:,i)]'*x2_h(:,i))^2/sum(epipolar1(:,i).^2)+([epipolar2(:,i)]'*x1_h(:,i))^2/sum(epipolar2(:,i).^2));
end

res_err = mean(Z);

end

